"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = run;

var _lodash = _interopRequireDefault(require("lodash"));

var _auto_corrector = _interopRequireDefault(require("./auto_corrector"));

var _configuration_loader = _interopRequireDefault(require("./configuration_loader"));

var _fsExtra = require("fs-extra");

var _json_formatter = _interopRequireDefault(require("./formatters/json_formatter"));

var _linter = _interopRequireDefault(require("./linter"));

var _path = _interopRequireDefault(require("path"));

var _summary_formatter = _interopRequireDefault(require("./formatters/summary_formatter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getFormatter(format) {
  const options = {
    stream: process.stdout
  };

  switch (format) {
    case 'minimal':
      return new _summary_formatter.default(_lodash.default.assign({
        minimal: true
      }, options));

    case 'summary':
      return new _summary_formatter.default(options);

    case 'json':
      return new _json_formatter.default(options);
  }
}

const hasError = results => _lodash.default.some(results, modules => _lodash.default.some(modules, ({
  error: error,
  errorFixed: errorFixed,
  errorIgnored: errorIgnored
}) => error && !(errorFixed || errorIgnored)));

async function run({
  autoCorrect: autoCorrect,
  format: format
}) {
  let fixes;
  const dir = process.cwd();

  const packageJsonPath = _path.default.join(dir, 'package.json');

  const packageJson = await (0, _fsExtra.readJson)(packageJsonPath);
  const config = await new _configuration_loader.default().load(dir);
  const results = await new _linter.default(config).lint({
    dir: dir,
    packageJson: packageJson
  });

  if (autoCorrect) {
    let updatedPackageJson;
    ({
      fixes: fixes,
      updatedPackageJson: updatedPackageJson
    } = new _auto_corrector.default().correct({
      packageJson: packageJson,
      results: results
    }));
    await (0, _fsExtra.writeJson)(packageJsonPath, updatedPackageJson, {
      spaces: 2
    });
  }

  getFormatter(format).print({
    fixes: fixes,
    results: results
  });

  if (hasError(results)) {
    process.exit(1);
  }
}