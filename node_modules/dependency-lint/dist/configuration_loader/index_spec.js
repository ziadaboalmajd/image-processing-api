"use strict";

var _ = _interopRequireDefault(require("./"));

var _fsExtra = require("fs-extra");

var _get_tmp_dir = _interopRequireDefault(require("../../test/support/get_tmp_dir"));

var _path = _interopRequireDefault(require("path"));

var _mocha = require("mocha");

var _chai = require("chai");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _mocha.describe)('ConfigurationLoader', function () {
  (0, _mocha.beforeEach)(async function () {
    this.configurationLoader = new _.default();
    this.tmpDir = await (0, _get_tmp_dir.default)();
  });
  (0, _mocha.describe)('load', function () {
    (0, _mocha.describe)('with a user configuration', function () {
      (0, _mocha.beforeEach)(function () {
        this.configPath = _path.default.join(this.tmpDir, 'dependency-lint.yml');
      });
      (0, _mocha.describe)('valid', function () {
        (0, _mocha.beforeEach)(async function () {
          const validContent = `\
requiredModules:
  acornParseProps:
    ecmaVersion: 6
  files:
    dev:
      - 'test/**/*'\
`;
          await (0, _fsExtra.writeFile)(this.configPath, validContent);
          this.result = await this.configurationLoader.load(this.tmpDir);
        });
        (0, _mocha.it)('returns the user configuration merged into the default configuration', function () {
          (0, _chai.expect)(this.result).to.eql({
            executedModules: {
              npmScripts: {
                dev: ['lint', 'publish', 'test', 'version']
              },
              shellScripts: {
                dev: [],
                ignore: [],
                root: ''
              }
            },
            ignoreErrors: {
              missing: [],
              shouldBeDependency: [],
              shouldBeDevDependency: [],
              unused: []
            },
            requiredModules: {
              acornParseProps: {
                ecmaVersion: 6
              },
              files: {
                dev: ['test/**/*'],
                ignore: ['node_modules/**/*'],
                root: '**/*.js'
              },
              stripLoaders: false,
              transpilers: []
            }
          });
        });
      });
      (0, _mocha.describe)('invalid', function () {
        (0, _mocha.beforeEach)(async function () {
          const invalidContent = 'invalid: {';
          await (0, _fsExtra.writeFile)(this.configPath, invalidContent);

          try {
            await this.configurationLoader.load(this.tmpDir);
          } catch (error) {
            this.error = error;
          }
        });
        (0, _mocha.it)('errors with a message that includes the path to the config', function () {
          (0, _chai.expect)(this.error.message).to.include(this.configPath);
        });
      });
    });
    (0, _mocha.describe)('without a user configuration', function () {
      (0, _mocha.beforeEach)(async function () {
        this.result = await this.configurationLoader.load(this.tmpDir);
      });
      (0, _mocha.it)('returns the default configuration', function () {
        (0, _chai.expect)(this.result).to.eql({
          executedModules: {
            npmScripts: {
              dev: ['lint', 'publish', 'test', 'version']
            },
            shellScripts: {
              dev: [],
              ignore: [],
              root: ''
            }
          },
          ignoreErrors: {
            missing: [],
            shouldBeDependency: [],
            shouldBeDevDependency: [],
            unused: []
          },
          requiredModules: {
            acornParseProps: {},
            files: {
              dev: ['{features,spec,test}/**/*', '**/*{.,_,-}{spec,test}.js'],
              ignore: ['node_modules/**/*'],
              root: '**/*.js'
            },
            stripLoaders: false,
            transpilers: []
          }
        });
      });
    });
  });
});