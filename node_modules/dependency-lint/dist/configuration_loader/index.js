"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _fsExtra = require("fs-extra");

var _path = _interopRequireDefault(require("path"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ConfigurationLoader {
  constructor() {
    this.defaultConfigPath = _path.default.join(__dirname, '..', '..', 'config', 'default.yml');
  }

  async load(dir) {
    const [defaultConfig, userConfig] = await Promise.all([this.loadDefaultConfig(), this.loadUserConfig(dir)]);

    const customizer = function (objValue, srcValue) {
      if (_lodash.default.isArray(srcValue)) {
        return srcValue;
      }
    };

    return _lodash.default.mergeWith({}, defaultConfig, userConfig, customizer);
  }

  async loadConfig(filePath) {
    const content = await (0, _fsExtra.readFile)(filePath, 'utf8');
    return _jsYaml.default.safeLoad(content, {
      filename: filePath
    });
  }

  loadDefaultConfig() {
    return this.loadConfig(this.defaultConfigPath);
  }

  async loadUserConfig(dir) {
    const userConfigPath = _path.default.join(dir, 'dependency-lint.yml');

    try {
      await (0, _fsExtra.access)(userConfigPath);
    } catch (error) {
      return {};
    }

    return this.loadConfig(userConfigPath);
  }

}

exports.default = ConfigurationLoader;