"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _errors = _interopRequireDefault(require("../errors"));

var _sortedObject = _interopRequireDefault(require("sorted-object"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class AutoCorrector {
  correct({
    packageJson: packageJson,
    results: results
  }) {
    const {
      changes: changes,
      fixes: fixes
    } = this.getChanges(results);
    const updatedPackageJson = this.applyChanges({
      changes: changes,
      packageJson: packageJson
    });
    return {
      fixes: fixes,
      updatedPackageJson: updatedPackageJson
    };
  }

  getChanges(results) {
    const changes = [];
    const fixes = {
      dependencies: [],
      devDependencies: []
    };

    for (const type in results) {
      const modules = results[type];

      for (const module of modules) {
        const change = this.getChange({
          module: module,
          type: type
        });

        if (change) {
          changes.push(change);
          fixes[type].push(module.name);
        }
      }
    }

    return {
      changes: changes,
      fixes: fixes
    };
  }

  getChange({
    module: module,
    type: type
  }) {
    if (module.errorIgnored) {
      return;
    }

    switch (module.error) {
      case _errors.default.SHOULD_BE_DEPENDENCY:
      case _errors.default.SHOULD_BE_DEV_DEPENDENCY:
        return function (packageJson) {
          const newType = type === 'dependencies' ? 'devDependencies' : 'dependencies';
          const version = packageJson[type][module.name];
          delete packageJson[type][module.name];

          if (!packageJson[newType]) {
            packageJson[newType] = {};
          }

          packageJson[newType][module.name] = version;
          packageJson[newType] = (0, _sortedObject.default)(packageJson[newType]);
        };

      case _errors.default.UNUSED:
        return packageJson => delete packageJson[type][module.name];
    }
  }

  applyChanges({
    changes: changes,
    packageJson: packageJson
  }) {
    const updatedPackageJson = _lodash.default.cloneDeep(packageJson);

    for (const change of changes) {
      change(updatedPackageJson);
    }

    return updatedPackageJson;
  }

}

exports.default = AutoCorrector;