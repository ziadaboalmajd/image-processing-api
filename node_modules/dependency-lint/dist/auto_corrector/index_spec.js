"use strict";

var _ = _interopRequireDefault(require("./"));

var _errors = _interopRequireDefault(require("../errors"));

var _mocha = require("mocha");

var _chai = require("chai");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const examples = [{
  description: 'no errors',
  inputResults: {
    dependencies: [{
      name: 'a'
    }],
    devDependencies: [{
      name: 'b'
    }]
  },
  output: {
    fixes: {
      dependencies: [],
      devDependencies: []
    },
    updatedPackageJson: {
      dependencies: {
        a: '0.0.1'
      },
      devDependencies: {
        b: '0.0.1'
      },
      name: 'test'
    }
  }
}, {
  description: 'dependency unused',
  inputResults: {
    dependencies: [{
      name: 'a',
      error: _errors.default.UNUSED
    }],
    devDependencies: [{
      name: 'b'
    }]
  },
  output: {
    fixes: {
      dependencies: ['a'],
      devDependencies: []
    },
    updatedPackageJson: {
      dependencies: {},
      devDependencies: {
        b: '0.0.1'
      },
      name: 'test'
    }
  }
}, {
  description: 'dependency unused - ignored',
  inputResults: {
    dependencies: [{
      name: 'a',
      error: _errors.default.UNUSED,
      errorIgnored: true
    }],
    devDependencies: [{
      name: 'b'
    }]
  },
  output: {
    fixes: {
      dependencies: [],
      devDependencies: []
    },
    updatedPackageJson: {
      dependencies: {
        a: '0.0.1'
      },
      devDependencies: {
        b: '0.0.1'
      },
      name: 'test'
    }
  }
}, {
  description: 'devDependency unused',
  inputResults: {
    dependencies: [{
      name: 'a'
    }],
    devDependencies: [{
      name: 'b',
      error: _errors.default.UNUSED
    }]
  },
  output: {
    fixes: {
      dependencies: [],
      devDependencies: ['b']
    },
    updatedPackageJson: {
      dependencies: {
        a: '0.0.1'
      },
      devDependencies: {},
      name: 'test'
    }
  }
}, {
  description: 'dependency should be devDependency',
  inputResults: {
    dependencies: [{
      name: 'a',
      error: _errors.default.SHOULD_BE_DEV_DEPENDENCY
    }],
    devDependencies: [{
      name: 'b'
    }]
  },
  output: {
    fixes: {
      dependencies: ['a'],
      devDependencies: []
    },
    updatedPackageJson: {
      dependencies: {},
      devDependencies: {
        a: '0.0.1',
        b: '0.0.1'
      },
      name: 'test'
    }
  }
}, {
  description: 'devDependency should be dependency',
  inputResults: {
    dependencies: [{
      name: 'a'
    }],
    devDependencies: [{
      name: 'b',
      error: _errors.default.SHOULD_BE_DEPENDENCY
    }]
  },
  output: {
    fixes: {
      dependencies: [],
      devDependencies: ['b']
    },
    updatedPackageJson: {
      dependencies: {
        a: '0.0.1',
        b: '0.0.1'
      },
      devDependencies: {},
      name: 'test'
    }
  }
}];
(0, _mocha.describe)('AutoCorrector', function () {
  (0, _mocha.beforeEach)(function () {
    return this.autoCorrector = new _.default();
  });
  (0, _mocha.describe)('correct', function () {
    (0, _mocha.beforeEach)(function () {
      this.results = {
        dependencies: ['a'],
        devDependencies: []
      };
      this.packageJson = {
        dependencies: {
          a: '0.0.1'
        },
        devDependencies: {
          b: '0.0.1'
        },
        name: 'test'
      };
    });
    examples.forEach(({
      inputResults: inputResults,
      description: description,
      output: output
    }) => (0, _mocha.it)(description, function () {
      const input = {
        packageJson: this.packageJson,
        results: inputResults
      };
      const result = this.autoCorrector.correct(input);
      (0, _chai.expect)(result).to.eql(output);
    }));
  });
});