"use strict";

var _lodash = _interopRequireDefault(require("lodash"));

var _fsExtra = require("fs-extra");

var _get_tmp_dir = _interopRequireDefault(require("../../../test/support/get_tmp_dir"));

var _path = _interopRequireDefault(require("path"));

var _required_module_finder = _interopRequireDefault(require("./required_module_finder"));

var _mocha = require("mocha");

var _chai = require("chai");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const baseBabelExample = {
  filePath: 'server.js',
  filePattern: '**/*.js',
  setup: async function (tmpDir) {
    const filePath = _path.default.join(tmpDir, '.babelrc');

    const fileContent = '{"plugins": ["@babel/plugin-syntax-dynamic-import"], "presets": [["@babel/preset-env", {"targets": "maintained node versions"}]]}';
    return (0, _fsExtra.writeFile)(filePath, fileContent);
  },
  transpilers: [{
    extension: '.js',
    fnName: 'transformSync',
    module: '@babel/core',
    resultKey: 'code'
  }]
};
const baseCoffeeScriptExample = {
  filePath: 'server.coffee',
  filePattern: '**/*.coffee',
  transpilers: [{
    extension: '.coffee',
    module: 'coffeescript'
  }]
};
const baseJavaScriptExample = {
  filePath: 'server.js',
  filePattern: '**/*.js'
};
const examples = [_lodash.default.assign({}, baseBabelExample, {
  content: 'import myModule from "myModule',
  description: 'invalid babel',
  expectedError: true
}), _lodash.default.assign({}, baseBabelExample, {
  content: 'import myModule from "myModule"',
  description: 'babel file requiring a module',
  expectedResult: [{
    name: 'myModule',
    file: 'server.js'
  }]
}), _lodash.default.assign({}, baseBabelExample, {
  acornParseProps: {
    ecmaVersion: 6
  },
  content: 'import("myModule")',
  description: 'babel file with a dynamic import',
  expectedResult: [{
    name: 'myModule',
    file: 'server.js'
  }]
}), _lodash.default.assign({}, baseCoffeeScriptExample, {
  content: 'myModule = require "myModule',
  description: 'invalid coffeescript',
  expectedError: true
}), _lodash.default.assign({}, baseCoffeeScriptExample, {
  content: 'myModule = require "myModule"',
  description: 'coffeescript file requiring a module',
  expectedResult: [{
    name: 'myModule',
    file: 'server.coffee'
  }]
}), _lodash.default.assign({}, baseCoffeeScriptExample, {
  content: 'myModule = require.resolve "myModule"',
  description: 'coffeescript file resolving a module',
  expectedResult: [{
    name: 'myModule',
    file: 'server.coffee'
  }]
}), _lodash.default.assign({}, baseJavaScriptExample, {
  content: 'var myModule = require("myModule"',
  description: 'invalid javascript',
  expectedError: true
}), _lodash.default.assign({}, baseJavaScriptExample, {
  content: 'var myModule = require("myModule");',
  description: 'javascript file requiring a module',
  expectedResult: [{
    name: 'myModule',
    file: 'server.js'
  }]
}), _lodash.default.assign({}, baseJavaScriptExample, {
  content: 'var myModule = require.resolve("myModule");',
  description: 'javascript file resolving a module',
  expectedResult: [{
    name: 'myModule',
    file: 'server.js'
  }]
}), _lodash.default.assign({}, baseJavaScriptExample, {
  content: 'var myModule = require("myModule");',
  description: 'javascript file with a coffee-script transpiler',
  expectedResult: [{
    name: 'myModule',
    file: 'server.js'
  }],
  transpilers: [{
    extension: '.coffee',
    module: 'coffee-script'
  }]
})];
(0, _mocha.describe)('RequiredModuleFinder', function () {
  (0, _mocha.beforeEach)(async function () {
    this.tmpDir = await (0, _get_tmp_dir.default)();

    const nodeModulesPath = _path.default.join(__dirname, '..', '..', '..', 'node_modules');

    await (0, _fsExtra.symlink)(nodeModulesPath, _path.default.join(this.tmpDir, 'node_modules'));
  });
  (0, _mocha.describe)('find', () => examples.forEach(function (example) {
    const {
      acornParseProps: acornParseProps,
      content: content,
      description: description,
      expectedError: expectedError,
      expectedResult: expectedResult,
      filePath: filePath,
      filePattern: filePattern,
      setup: setup,
      transpilers: transpilers
    } = example;
    (0, _mocha.describe)(description, function () {
      (0, _mocha.beforeEach)(async function () {
        const finder = new _required_module_finder.default({
          acornParseProps: acornParseProps,
          files: {
            root: filePattern
          },
          transpilers: transpilers
        });
        await (0, _fsExtra.writeFile)(_path.default.join(this.tmpDir, filePath), content);

        if (setup) {
          await setup(this.tmpDir);
        }

        try {
          this.result = await finder.find(this.tmpDir);
        } catch (error) {
          if (!expectedError) {
            throw error;
          }

          this.error = error;
        }
      });

      if (expectedError) {
        (0, _mocha.it)('errors with a message that includes the file path', function () {
          (0, _chai.expect)(this.error.message).to.include(filePath);
        });
      } else {
        (0, _mocha.it)('returns with the required modules', function () {
          (0, _chai.expect)(this.result).to.eql(expectedResult);
        });
      }
    });
  }));
});