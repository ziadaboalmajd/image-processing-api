"use strict";

var _executed_module_finder = _interopRequireDefault(require("./executed_module_finder"));

var _fsExtra = require("fs-extra");

var _get_tmp_dir = _interopRequireDefault(require("../../../test/support/get_tmp_dir"));

var _path = _interopRequireDefault(require("path"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _mocha = require("mocha");

var _chai = require("chai");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const examples = [{
  config: {
    shellScripts: {
      root: ''
    }
  },
  description: 'no scripts',
  expectedResult: [],
  packageJson: {}
}, {
  config: {
    shellScripts: {
      root: ''
    }
  },
  description: 'package.json script using module exectuable',
  expectedResult: [{
    name: 'myModule',
    script: 'test'
  }],
  modulePackageJson: {
    name: 'myModule',
    bin: 'path/to/executable'
  },
  packageJson: {
    dependencies: {
      myModule: '0.0.1'
    },
    scripts: {
      test: 'myModule --opt arg'
    }
  }
}, {
  config: {
    shellScripts: {
      root: ''
    }
  },
  description: 'package.json script using module named exectuable',
  expectedResult: [{
    name: 'myModule',
    script: 'test'
  }],
  modulePackageJson: {
    name: 'myModule',
    bin: {
      myExecutable: 'path/to/executable'
    }
  },
  packageJson: {
    dependencies: {
      myModule: '0.0.1'
    },
    scripts: {
      test: 'myExecutable --opt arg'
    }
  }
}, {
  config: {
    shellScripts: {
      root: ''
    }
  },
  description: 'package.json script using scoped module exectuable',
  expectedResult: [{
    name: '@myOrganization/myModule',
    script: 'test'
  }],
  modulePackageJson: {
    name: '@myOrganization/myModule',
    bin: {
      myExecutable: 'path/to/executable'
    }
  },
  packageJson: {
    dependencies: {
      '@myOrganization/myModule': '0.0.1'
    },
    scripts: {
      test: 'myExecutable --opt arg'
    }
  }
}, {
  config: {
    shellScripts: {
      root: ''
    }
  },
  description: 'package.json script containing module executable in another word',
  expectedResult: [],
  modulePackageJson: {
    name: 'myModule',
    bin: {
      myExecutable: 'path/to/executable'
    }
  },
  packageJson: {
    dependencies: {
      myModule: '0.0.1'
    },
    scripts: {
      test: 'othermyExecutable --opt arg'
    }
  }
}, {
  config: {
    shellScripts: {
      root: 'bin/*'
    }
  },
  description: 'shell script using module exectuable',
  expectedResult: [{
    name: 'myModule',
    file: 'bin/test'
  }],
  file: {
    path: 'bin/test',
    content: 'myExecutable --opt arg'
  },
  modulePackageJson: {
    name: 'myModule',
    bin: {
      myExecutable: 'path/to/executable'
    }
  },
  packageJson: {
    dependencies: {
      myModule: '0.0.1'
    }
  }
}];
(0, _mocha.describe)('ExecutedModuleFinder', function () {
  (0, _mocha.beforeEach)(async function () {
    this.tmpDir = await (0, _get_tmp_dir.default)();
  });
  (0, _mocha.describe)('find', () => examples.forEach(function (example) {
    const {
      config: config,
      description: description,
      expectedResult: expectedResult,
      file: file,
      modulePackageJson: modulePackageJson,
      packageJson: packageJson
    } = example;
    (0, _mocha.describe)(description, function () {
      (0, _mocha.beforeEach)(async function () {
        const promises = [];

        if (modulePackageJson) {
          const filePath = _path.default.join(this.tmpDir, 'node_modules', modulePackageJson.name, 'package.json');

          promises.push((0, _fsExtra.outputJson)(filePath, modulePackageJson));
        }

        if (file) {
          promises.push((0, _fsExtra.outputFile)(_path.default.join(this.tmpDir, file.path), file.content));
        }

        await _bluebird.default.all(promises);
        const finder = new _executed_module_finder.default(config);
        this.result = await finder.find({
          dir: this.tmpDir,
          packageJson: packageJson
        });
      });
      (0, _mocha.it)('returns the executed modules', function () {
        (0, _chai.expect)(this.result).to.eql(expectedResult);
      });
    });
  }));
});