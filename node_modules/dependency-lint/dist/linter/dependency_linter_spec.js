"use strict";

var _dependency_linter = _interopRequireDefault(require("./dependency_linter"));

var _errors = _interopRequireDefault(require("../errors"));

var _mocha = require("mocha");

var _chai = require("chai");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _mocha.describe)('DependencyLinter', function () {
  (0, _mocha.beforeEach)(function () {
    this.options = {
      executedModules: {
        npmScripts: {
          dev: ['test']
        },
        shellScripts: {
          dev: []
        }
      },
      ignoreErrors: {
        missing: [],
        shouldBeDependency: [],
        shouldBeDevDependency: [],
        unused: []
      },
      requiredModules: {
        files: {
          dev: ['**/*_spec.js']
        }
      }
    };
    this.input = {
      listedModules: {
        dependencies: [],
        devDependencies: []
      },
      usedModules: []
    };
    this.output = {
      dependencies: [],
      devDependencies: []
    };

    this.expectOutputToMatch = function () {
      const dependencyLinter = new _dependency_linter.default(this.options);
      this.result = dependencyLinter.lint(this.input);
      (0, _chai.expect)(this.result).to.eql(this.output);
    };
  });
  (0, _mocha.describe)('not used', function () {
    (0, _mocha.describe)('not listed', function () {
      (0, _mocha.beforeEach)(function () {
        const dependencyLinter = new _dependency_linter.default(this.options);
        this.result = dependencyLinter.lint(this.input);
      });
      (0, _mocha.it)('returns nothing', function () {
        this.expectOutputToMatch();
      });
    });
    (0, _mocha.describe)('listed as dependency', function () {
      (0, _mocha.beforeEach)(function () {
        this.input.listedModules.dependencies.push('myModule');
      });
      (0, _mocha.describe)('not ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.output.dependencies.push({
            name: 'myModule',
            error: _errors.default.UNUSED,
            files: [],
            scripts: []
          });
        });
        (0, _mocha.it)('returns error: unused', function () {
          this.expectOutputToMatch();
        });
      });
      (0, _mocha.describe)('ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.options.ignoreErrors.unused.push('myModule');
          this.output.dependencies.push({
            name: 'myModule',
            error: _errors.default.UNUSED,
            errorIgnored: true,
            files: [],
            scripts: []
          });
        });
        (0, _mocha.it)('returns ignored error: unused', function () {
          this.expectOutputToMatch();
        });
      });
    });
    (0, _mocha.describe)('listed as devDependency', function () {
      (0, _mocha.beforeEach)(function () {
        this.input.listedModules.devDependencies.push('myModule');
      });
      (0, _mocha.describe)('not ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.output.devDependencies.push({
            name: 'myModule',
            error: _errors.default.UNUSED,
            files: [],
            scripts: []
          });
        });
        (0, _mocha.it)('returns error: unused', function () {
          this.expectOutputToMatch();
        });
      });
      (0, _mocha.describe)('on allowed unused list', function () {
        (0, _mocha.beforeEach)(function () {
          this.options.ignoreErrors.unused.push('myModule');
          this.output.devDependencies.push({
            name: 'myModule',
            error: _errors.default.UNUSED,
            errorIgnored: true,
            files: [],
            scripts: []
          });
        });
        (0, _mocha.it)('returns ignored error: unused', function () {
          this.expectOutputToMatch();
        });
      });
    });
  });
  (0, _mocha.describe)('used as a dependency', function () {
    (0, _mocha.beforeEach)(function () {
      this.input.usedModules.push({
        name: 'myModule',
        files: ['server.js'],
        scripts: []
      });
    });
    (0, _mocha.describe)('not listed', function () {
      (0, _mocha.describe)('not ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.output.dependencies.push({
            name: 'myModule',
            files: ['server.js'],
            scripts: [],
            error: _errors.default.MISSING
          });
        });
        (0, _mocha.it)('returns error: missing', function () {
          this.expectOutputToMatch();
        });
      });
      (0, _mocha.describe)('ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.options.ignoreErrors.missing.push('myModule');
          this.output.dependencies.push({
            name: 'myModule',
            files: ['server.js'],
            scripts: [],
            error: _errors.default.MISSING,
            errorIgnored: true
          });
        });
        (0, _mocha.it)('returns ignored error: missing', function () {
          this.expectOutputToMatch();
        });
      });
    });
    (0, _mocha.describe)('listed as dependency', function () {
      (0, _mocha.beforeEach)(function () {
        this.input.listedModules.dependencies.push('myModule');
        this.output.dependencies.push({
          name: 'myModule',
          files: ['server.js'],
          scripts: []
        });
      });
      (0, _mocha.it)('returns success', function () {
        this.expectOutputToMatch();
      });
    });
    (0, _mocha.describe)('listed as devDependency', function () {
      (0, _mocha.beforeEach)(function () {
        this.input.listedModules.devDependencies.push('myModule');
      });
      (0, _mocha.describe)('not ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.output.devDependencies.push({
            name: 'myModule',
            files: ['server.js'],
            scripts: [],
            error: _errors.default.SHOULD_BE_DEPENDENCY
          });
        });
        (0, _mocha.it)('returns error: should be a dependency', function () {
          this.expectOutputToMatch();
        });
      });
      (0, _mocha.describe)('ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.options.ignoreErrors.shouldBeDependency.push('myModule');
          this.output.devDependencies.push({
            name: 'myModule',
            files: ['server.js'],
            scripts: [],
            error: _errors.default.SHOULD_BE_DEPENDENCY,
            errorIgnored: true
          });
        });
        (0, _mocha.it)('returns ignored error: should be a dependency', function () {
          this.expectOutputToMatch();
        });
      });
    });
    (0, _mocha.describe)('listed as dependency and devDependency', function () {
      (0, _mocha.beforeEach)(function () {
        this.input.listedModules.dependencies.push('myModule');
        this.input.listedModules.devDependencies.push('myModule');
        this.output.dependencies.push({
          name: 'myModule',
          files: ['server.js'],
          scripts: []
        });
      });
      (0, _mocha.describe)('not ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.output.devDependencies.push({
            name: 'myModule',
            files: ['server.js'],
            scripts: [],
            error: _errors.default.SHOULD_BE_DEPENDENCY
          });
        });
        (0, _mocha.it)('returns error: should be a dependency', function () {
          this.expectOutputToMatch();
        });
      });
      (0, _mocha.describe)('ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.options.ignoreErrors.shouldBeDependency.push('myModule');
          this.output.devDependencies.push({
            name: 'myModule',
            files: ['server.js'],
            scripts: [],
            error: _errors.default.SHOULD_BE_DEPENDENCY,
            errorIgnored: true
          });
        });
        (0, _mocha.it)('returns ignored error: should be a dependency', function () {
          this.expectOutputToMatch();
        });
      });
    });
  });
  (0, _mocha.describe)('used as a devDependency', function () {
    (0, _mocha.beforeEach)(function () {
      this.input.usedModules.push({
        name: 'myModule',
        files: ['server_spec.js'],
        scripts: []
      });
    });
    (0, _mocha.describe)('not listed', function () {
      (0, _mocha.describe)('not ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.output.devDependencies.push({
            name: 'myModule',
            files: ['server_spec.js'],
            scripts: [],
            error: _errors.default.MISSING
          });
        });
        (0, _mocha.it)('returns error: missing', function () {
          this.expectOutputToMatch();
        });
      });
      (0, _mocha.describe)('ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.options.ignoreErrors.missing.push('myModule');
          this.output.devDependencies.push({
            name: 'myModule',
            files: ['server_spec.js'],
            scripts: [],
            error: _errors.default.MISSING,
            errorIgnored: true
          });
        });
        (0, _mocha.it)('returns ignored error: missing', function () {
          this.expectOutputToMatch();
        });
      });
    });
    (0, _mocha.describe)('listed as dependency', function () {
      (0, _mocha.beforeEach)(function () {
        this.input.listedModules.dependencies.push('myModule');
      });
      (0, _mocha.describe)('not ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.output.dependencies.push({
            name: 'myModule',
            files: ['server_spec.js'],
            scripts: [],
            error: _errors.default.SHOULD_BE_DEV_DEPENDENCY
          });
        });
        (0, _mocha.it)('returns error: should be a devDependency', function () {
          this.expectOutputToMatch();
        });
      });
      (0, _mocha.describe)('ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.options.ignoreErrors.shouldBeDevDependency.push('myModule');
          this.output.dependencies.push({
            name: 'myModule',
            files: ['server_spec.js'],
            scripts: [],
            error: _errors.default.SHOULD_BE_DEV_DEPENDENCY,
            errorIgnored: true
          });
        });
        (0, _mocha.it)('returns ignored error: should be a devDependency', function () {
          this.expectOutputToMatch();
        });
      });
    });
    (0, _mocha.describe)('listed as devDependency', function () {
      (0, _mocha.beforeEach)(function () {
        this.input.listedModules.devDependencies.push('myModule');
        const dependencyLinter = new _dependency_linter.default(this.options);
        this.result = dependencyLinter.lint(this.input);
      });
      (0, _mocha.it)('returns success', function () {
        this.output.devDependencies.push({
          name: 'myModule',
          files: ['server_spec.js'],
          scripts: []
        });
        this.expectOutputToMatch();
      });
    });
    (0, _mocha.describe)('listed as dependency and devDependency', function () {
      (0, _mocha.beforeEach)(function () {
        this.input.listedModules.dependencies.push('myModule');
        this.input.listedModules.devDependencies.push('myModule');
        this.output.devDependencies.push({
          name: 'myModule',
          files: ['server_spec.js'],
          scripts: []
        });
      });
      (0, _mocha.describe)('not ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.output.dependencies.push({
            name: 'myModule',
            files: ['server_spec.js'],
            scripts: [],
            error: _errors.default.SHOULD_BE_DEV_DEPENDENCY
          });
        });
        (0, _mocha.it)('returns error: should be a dependency', function () {
          this.expectOutputToMatch();
        });
      });
      (0, _mocha.describe)('ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.options.ignoreErrors.shouldBeDevDependency.push('myModule');
          this.output.dependencies.push({
            name: 'myModule',
            files: ['server_spec.js'],
            scripts: [],
            error: _errors.default.SHOULD_BE_DEV_DEPENDENCY,
            errorIgnored: true
          });
        });
        (0, _mocha.it)('returns ignored error: should be a dependency', function () {
          this.expectOutputToMatch();
        });
      });
    });
  });
  (0, _mocha.describe)('used as a dependency and a devDependency', function () {
    (0, _mocha.beforeEach)(function () {
      this.input.usedModules.push({
        name: 'myModule',
        files: ['server.js', 'server_spec.js'],
        scripts: []
      });
    });
    (0, _mocha.describe)('not listed', function () {
      (0, _mocha.describe)('not ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.output.dependencies.push({
            name: 'myModule',
            files: ['server.js', 'server_spec.js'],
            scripts: [],
            error: _errors.default.MISSING
          });
        });
        (0, _mocha.it)('returns error: missing', function () {
          this.expectOutputToMatch();
        });
      });
      (0, _mocha.describe)('ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.options.ignoreErrors.missing.push('myModule');
          this.output.dependencies.push({
            name: 'myModule',
            files: ['server.js', 'server_spec.js'],
            scripts: [],
            error: _errors.default.MISSING,
            errorIgnored: true
          });
        });
        (0, _mocha.it)('returns ignored error: missing', function () {
          this.expectOutputToMatch();
        });
      });
    });
    (0, _mocha.describe)('listed as dependency', function () {
      (0, _mocha.beforeEach)(function () {
        this.input.listedModules.dependencies.push('myModule');
        this.output.dependencies.push({
          name: 'myModule',
          files: ['server.js', 'server_spec.js'],
          scripts: []
        });
      });
      (0, _mocha.it)('returns success', function () {
        this.expectOutputToMatch();
      });
    });
    (0, _mocha.describe)('listed as devDependency', function () {
      (0, _mocha.beforeEach)(function () {
        this.input.listedModules.devDependencies.push('myModule');
      });
      (0, _mocha.describe)('not ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.output.devDependencies.push({
            name: 'myModule',
            files: ['server.js', 'server_spec.js'],
            scripts: [],
            error: _errors.default.SHOULD_BE_DEPENDENCY
          });
        });
        (0, _mocha.it)('returns error: should be a dependency', function () {
          this.expectOutputToMatch();
        });
      });
      (0, _mocha.describe)('ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.options.ignoreErrors.shouldBeDependency.push('myModule');
          this.output.devDependencies.push({
            name: 'myModule',
            files: ['server.js', 'server_spec.js'],
            scripts: [],
            error: _errors.default.SHOULD_BE_DEPENDENCY,
            errorIgnored: true
          });
        });
        (0, _mocha.it)('returns ignored error: should be a dependency', function () {
          this.expectOutputToMatch();
        });
      });
    });
    (0, _mocha.describe)('listed as dependency and devDependency', function () {
      (0, _mocha.beforeEach)(function () {
        this.input.listedModules.dependencies.push('myModule');
        this.input.listedModules.devDependencies.push('myModule');
        this.output.dependencies.push({
          name: 'myModule',
          files: ['server.js', 'server_spec.js'],
          scripts: []
        });
      });
      (0, _mocha.describe)('not ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.output.devDependencies.push({
            name: 'myModule',
            files: ['server.js', 'server_spec.js'],
            scripts: [],
            error: _errors.default.SHOULD_BE_DEPENDENCY
          });
        });
        (0, _mocha.it)('returns error: should be a dependency', function () {
          this.expectOutputToMatch();
        });
      });
      (0, _mocha.describe)('ignored', function () {
        (0, _mocha.beforeEach)(function () {
          this.options.ignoreErrors.shouldBeDependency.push('myModule');
          this.output.devDependencies.push({
            name: 'myModule',
            files: ['server.js', 'server_spec.js'],
            scripts: [],
            error: _errors.default.SHOULD_BE_DEPENDENCY,
            errorIgnored: true
          });
        });
        (0, _mocha.it)('returns ignored error: should be a dependency', function () {
          this.expectOutputToMatch();
        });
      });
    });
  });
  (0, _mocha.describe)('dependency-lint', () => (0, _mocha.describe)('not used, listed as devDependency', function () {
    (0, _mocha.beforeEach)(function () {
      this.input.listedModules.devDependencies.push('dependency-lint');
      this.output.devDependencies.push({
        name: 'dependency-lint',
        files: [],
        scripts: []
      });
    });
    (0, _mocha.it)('returns success', function () {
      this.expectOutputToMatch();
    });
  }));
});