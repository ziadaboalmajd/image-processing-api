"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _fsExtra = require("fs-extra");

var _path = _interopRequireDefault(require("path"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _semver = _interopRequireDefault(require("semver"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class InstalledModuleValidater {
  buildErrorMessage(issues) {
    const issueMessages = issues.map(({
      name: name,
      status: status
    }) => `${name} (${status})`);
    return `\
The following modules listed in your \`package.json\` have issues:
  ${issueMessages.join('\n  ')}
All modules need to be installed with the correct semantic version
to properly check for the usage of a module's executables.\
`;
  }

  async getModuleStatus({
    dir: dir,
    name: name,
    version: version
  }) {
    const modulePackageJsonPath = _path.default.join(dir, 'node_modules', name, 'package.json');

    try {
      await (0, _fsExtra.access)(modulePackageJsonPath);
    } catch (error) {
      return 'not installed';
    }

    const modulePackageJson = await (0, _fsExtra.readJson)(modulePackageJsonPath);

    if (_semver.default.satisfies(modulePackageJson.version, version)) {
      return;
    }

    return `installed: ${modulePackageJson.version}, listed: ${version}`;
  }

  async validate({
    dir: dir,
    packageJson: packageJson
  }) {
    const modules = _lodash.default.assign({}, packageJson.devDependencies, packageJson.dependencies);

    const issues = [];
    await _bluebird.default.all(_lodash.default.map(modules, async (version, name) => {
      if (!_semver.default.validRange(version)) {
        return;
      }

      const status = await this.getModuleStatus({
        dir: dir,
        name: name,
        version: version
      });

      if (!status) {
        return;
      }

      issues.push({
        name: name,
        status: status
      });
    }));

    if (issues.length > 0) {
      throw new Error(this.buildErrorMessage(issues));
    }
  }

}

exports.default = InstalledModuleValidater;