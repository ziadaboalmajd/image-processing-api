"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _camelCase = _interopRequireDefault(require("camel-case"));

var _errors = _interopRequireDefault(require("../errors"));

var _minimatch = _interopRequireDefault(require("minimatch"));

var _package = _interopRequireDefault(require("../../package.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DependencyLinter {
  constructor(config) {
    this.config = config;
    this.devFiles = _lodash.default.concat(this.config.executedModules.shellScripts.dev, this.config.requiredModules.files.dev);
    this.ignoreErrors = {};

    for (const key in _errors.default) {
      const value = _errors.default[key];
      this.ignoreErrors[value] = this.config.ignoreErrors[(0, _camelCase.default)(key)];
    }
  } // Lints the used and listed modules
  //
  // listedModules - {dependencies, devDependencies} where each is an array of module names
  // usedModules - array of {name, files, scripts}
  //
  // Returns {dependencies, devDependencies}
  //         where each is an array of {name, files, scripts, error, warning}


  lint({
    listedModules: listedModules,
    usedModules: usedModules
  }) {
    let key;
    const out = {
      dependencies: [],
      devDependencies: []
    };

    for (const usedModule of usedModules) {
      const status = {
        isDependency: !this.isDevDependency(usedModule),
        listedAsDependency: Array.from(listedModules.dependencies).includes(usedModule.name),
        listedAsDevDependency: Array.from(listedModules.devDependencies).includes(usedModule.name)
      };
      this.parseUsedModule(usedModule, status, out);
    }

    for (key in listedModules) {
      const modules = listedModules[key];

      for (var name of modules) {
        if (!_lodash.default.some(usedModules, moduleData => moduleData.name === name)) {
          const listedModule = {
            name: name,
            files: [],
            scripts: []
          };

          if (key !== 'devDependencies' || name !== _package.default.name) {
            listedModule.error = _errors.default.UNUSED;
          }

          out[key].push(listedModule);
        }
      }
    }

    for (key in out) {
      const results = out[key];
      results.forEach(result => {
        if (result.error && this.isErrorIgnored(result)) {
          return result.errorIgnored = true;
        }
      });
      out[key] = _lodash.default.sortBy(results, 'name');
    }

    return out;
  }

  isErrorIgnored({
    error: error,
    name: name
  }) {
    return _lodash.default.some(this.ignoreErrors[error], regex => name.match(regex));
  }

  isDevDependency({
    files: files,
    scripts: scripts
  }) {
    return _lodash.default.every(files, this.isDevFile.bind(this)) && _lodash.default.every(scripts, this.isDevScript.bind(this));
  }

  isDevFile(file) {
    return _lodash.default.some(this.devFiles, pattern => (0, _minimatch.default)(file, pattern));
  }

  isDevScript(script) {
    return _lodash.default.some(this.config.executedModules.npmScripts.dev, regex => script.match(regex));
  }

  parseUsedModule(usedModule, status, result) {
    const {
      isDependency: isDependency,
      listedAsDependency: listedAsDependency,
      listedAsDevDependency: listedAsDevDependency
    } = status;

    if (isDependency) {
      if (listedAsDependency) {
        result.dependencies.push(usedModule);
      }

      if (listedAsDevDependency) {
        result.devDependencies.push(_lodash.default.assign({}, usedModule, {
          error: _errors.default.SHOULD_BE_DEPENDENCY
        }));
      }

      if (!listedAsDependency && !listedAsDevDependency) {
        return result.dependencies.push(_lodash.default.assign({}, usedModule, {
          error: _errors.default.MISSING
        }));
      }
    } else {
      if (listedAsDependency) {
        result.dependencies.push(_lodash.default.assign({}, usedModule, {
          error: _errors.default.SHOULD_BE_DEV_DEPENDENCY
        }));
      }

      if (listedAsDevDependency) {
        result.devDependencies.push(usedModule);
      }

      if (!listedAsDependency && !listedAsDevDependency) {
        result.devDependencies.push(_lodash.default.assign({}, usedModule, {
          error: _errors.default.MISSING
        }));
      }
    }
  }

}

exports.default = DependencyLinter;